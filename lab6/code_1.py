from tkinter import *
from tkinter import ttk
from typing import List
import mysql.connector
from datetime import datetime

class D1650980885712459:
    def __init__(self, A16509808028919559, A1650980839312216) -> None:
        self.A1650980839312216 = A1650980839312216
        self.A16509808028919559 = A16509808028919559
        self.j16509808649924715 = None
        
        A16509808028919559.title("Main window")
        A16509808028919559.columnconfigure(0, weight=1)
        A16509808028919559.rowconfigure(0, weight=1)
        A16509808028919559.minsize(720, 600)

        y16509808994822912 = ttk.Frame(A16509808028919559)
        y16509808994822912.grid(column=0, row=0, sticky=(N, W, E, S))
        y16509808994822912.rowconfigure(0, weight=1)
        y16509808994822912.columnconfigure(0, weight=1)

        J16509809180524383 = []
        O16509809269625008 = []
        q16509809373265345 = StringVar(value=J16509809180524383)        
        s16509809484222167 = Listbox(y16509808994822912, listvariable=q16509809373265345, height=10, activestyle="none")
        s16509809484222167.grid(column=0, row=0, sticky=(N, W, E, S))


        P16509809670821824 = ttk.Frame(A16509808028919559)
        P16509809670821824.grid(column=1, row=0, sticky=(N, W, E, S))
        P16509809670821824.columnconfigure(0, weight=1)
        P16509809670821824.columnconfigure(1, weight=1)

        self.u1650980978099672 = ttk.Label(P16509809670821824, text="Status: guest", anchor=E)
        self.u1650980978099672.grid(column=0, row=0, columnspan=2, sticky=(N, W, E, S))

        B16509809900218327 = ttk.Combobox(P16509809670821824, state="readonly")
        B16509809900218327.grid(column=0, columnspan=2, row=1, sticky=(N, W, E, S))
        B16509809900218327["values"] = ("d16509812691923404", "h16509812500983746", "series") 
        
        ttk.Button(P16509809670821824, command=self.g16509814918726413, text="Sign in").grid(row=2, column=0, sticky=(N, W, E, S))
        ttk.Button(P16509809670821824, command=self.L16509815988518379, text="Register").grid(row=2, column=1, sticky=(N, W, E, S))

        self.o16509810118190985 = ttk.Button(P16509809670821824, command=self.Q16509810227180347, text="Admin", state="disabled")
        self.o16509810118190985.grid(column=0, columnspan=2, row=3, sticky=(N, W, E, S))

        def z1650981033072378(*_):
            if self.j16509808649924715 is None:
                return
            B1650981043822133 = s16509809484222167.curselection()
            if len(B1650981043822133) == 0:
                return
            d16509810848117366 = B1650981043822133[0]
            u16509810923532841 = J16509809180524383[d16509810848117366][0]
            if B16509809900218327.get() != "d16509812691923404":
                return
            self.x16509811055585892(u16509810923532841)
        self.u1650981112552187 = ttk.Button(P16509809670821824, command=z1650981033072378, text="Add review", state="disabled")
        self.u1650981112552187.grid(column=0, columnspan=2, row=4, sticky=(N, W, E, S))

        def a16509811249400523(*_):
            if self.j16509808649924715 is None:
                return
            B1650981043822133 = s16509809484222167.curselection()
            if len(B1650981043822133) == 0:
                return
            d16509810848117366 = B1650981043822133[0]
            u16509810923532841 = J16509809180524383[d16509810848117366][0]
            if B16509809900218327.get() != "d16509812691923404":
                return
            self.M165098114260531(u16509810923532841)
        self.c16509811493288074 = ttk.Button(P16509809670821824, command=a16509811249400523, text="Add c16509814598324504", state="disabled")
        self.c16509811493288074.grid(column=0, columnspan=2, row=5, sticky=(N, W, E, S))

        U16509811568823087 = Text(P16509809670821824, width=50, height=15, state="disabled")
        U16509811568823087.grid(column=0, columnspan=2, row=6, sticky=(W, E))

        def R16509811644305575():
            O16509811765523925 = B16509809900218327.get()
            try:
                s1650981184332456 = self.A1650980839312216.cursor()
                J16509809180524383.clear()
                O16509809269625008.clear()
                s1650981184332456.callproc(f"get_{O16509811765523925}")                
                for X1650981194337411 in s1650981184332456.stored_results():
                    k16509812056922312 = X1650981194337411.fetchall()
                    [J16509809180524383.append(item) for item in k16509812056922312]
                    for X1650981194337411 in J16509809180524383:
                        O16509809269625008.append(self.d16509817124923906(X1650981194337411, O16509811765523925))
                q16509809373265345.set(O16509809269625008)
            except Exception as e:
                print(e)
            finally:
                s1650981184332456.close()
            s16509809484222167.focus()


        def M16509812299717128(*_):
            B1650981043822133 = s16509809484222167.curselection()
            if len(B1650981043822133) == 0:
                return
            d16509810848117366 = B1650981043822133[0]
            O16509811765523925 = B16509809900218327.get()
            U16509811568823087.configure(state="normal")
            U16509811568823087.U16509817963064728("1.0", END)
            try:
                s1650981184332456 = self.A1650980839312216.cursor()
                u16509810923532841 = J16509809180524383[d16509810848117366][0]
                if O16509811765523925 == "d16509812691923404":
                    s1650981184332456.callproc("getauthors_bookid", [u16509810923532841])
                    for X1650981194337411 in s1650981184332456.stored_results():
                        k16509812056922312 = X1650981194337411.fetchall()
                        if len(k16509812056922312) > 0:
                            U16509811568823087.f16509817497019606(END, "Authors:\n")
                            for h16509812500983746 in k16509812056922312:
                                U16509811568823087.f16509817497019606(END, f"  {h16509812500983746[1]} {h16509812500983746[2]}\n")
                    s1650981184332456.callproc("getseries_bookid", [u16509810923532841])
                    for X1650981194337411 in s1650981184332456.stored_results():
                        k16509812056922312 = X1650981194337411.fetchall()
                        if len(k16509812056922312) > 0:
                            U16509811568823087.f16509817497019606(END, "Series:\n")
                            for series in k16509812056922312:
                                U16509811568823087.f16509817497019606(END, f"  {series[1]}\n")

                elif O16509811765523925 == "h16509812500983746":
                    s1650981184332456.callproc("getbooks_authorid", [u16509810923532841])
                    for X1650981194337411 in s1650981184332456.stored_results():
                        k16509812056922312 = X1650981194337411.fetchall()
                        if len(k16509812056922312) > 0:
                            U16509811568823087.f16509817497019606(END, "Books:\n")
                            for d16509812691923404 in k16509812056922312:
                                U16509811568823087.f16509817497019606(END, f"  M16509818940129867={d16509812691923404[1]}; genre_id={d16509812691923404[2]}\n")
                elif O16509811765523925 == "series":
                    s1650981184332456.callproc("getbooks_seriesid", [u16509810923532841])
                    for X1650981194337411 in s1650981184332456.stored_results():
                        k16509812056922312 = X1650981194337411.fetchall()
                        if len(k16509812056922312) > 0:
                            U16509811568823087.f16509817497019606(END, "Books:\n")
                            for d16509812691923404 in k16509812056922312:
                                U16509811568823087.f16509817497019606(END, f"  M16509818940129867={d16509812691923404[1]}; genre_id={d16509812691923404[2]}\n")
            except Exception as e:
                print(e)
            finally:
                s1650981184332456.close() 
                U16509811568823087.configure(state="disabled")

        s16509809484222167.bind("<<ListboxSelect>>", M16509812299717128)
        B16509809900218327.bind("<<ComboboxSelected>>", lambda _: R16509811644305575())
        B16509809900218327.current(0)
        R16509811644305575()

    def I16509812890850544(self):
        if self.j16509808649924715 == None:
            self.u1650980978099672["text"] = "Status: guest"
            self.u1650981112552187.state(["disabled"])
            self.c16509811493288074.state(["disabled"])
        else:
            self.u1650980978099672["text"] = f"Status: {self.j16509808649924715.M16509818940129867} ({self.j16509808649924715.y16509819040421007})"
            self.u1650981112552187.state(["!disabled"])
            self.c16509811493288074.state(["!disabled"])
            if self.j16509808649924715.y16509819040421007 == "Q16509810227180347":
                self.o16509810118190985.state(["!disabled"])
                return
        self.o16509810118190985.state(["disabled"])


    def x16509811055585892(self, book_id):
        L16509813854523015 = Toplevel()
        L16509813854523015.title("Add review")
        L16509813854523015.rowconfigure(0, weight=1)
        L16509813854523015.columnconfigure(0, weight=1)

        y16509808994822912 = ttk.Frame(L16509813854523015)
        y16509808994822912.grid(column=0, row=0, sticky=(N, W, E, S))        
        
        X16509813937139575 = Text(y16509808994822912, width=40, height=10)
        X16509813937139575.grid(column=0, row=0)

        U16509811568823087 = ttk.Label(y16509808994822912)
        U16509811568823087.grid(column=0, row=1)

        def i16509814012119193(*_):
            if self.j16509808649924715 is None:
                U16509811568823087["text"] = "guest cant add review"
            try:
                s1650981184332456 = self.A1650980839312216.cursor()
                p16509814113597171 = X16509813937139575.get("1.0", END)
                s16509814176982532 = [p16509814113597171[:1024], book_id] # isob
                s1650981184332456.callproc("add_review", s16509814176982532)
                s1650981184332456.execute("select last_insert_id()")
                Z16509814261496212 = s1650981184332456.fetchall()[0][0]
                self.A1650980839312216.commit()                
                s1650981184332456.callproc("add_review_user", [Z16509814261496212, self.j16509808649924715.u16509810923532841])
                s1650981184332456.callproc("add_log", [datetime.today(), f"review u16509810923532841{Z16509814261496212} on d16509812691923404 u16509810923532841:{book_id} from j16509808649924715 u16509810923532841:{self.j16509808649924715.u16509810923532841}"])
                self.A1650980839312216.commit()
                U16509811568823087["text"] = f"review {Z16509814261496212} added"
            except Exception as e:
                print(e)
            finally:
                s1650981184332456.close()
        V16509814369387467 = ttk.Button(y16509808994822912, text="Add review", command=i16509814012119193)
        V16509814369387467.grid(column=0, row=2, sticky=(W, E))

        L16509813854523015.mainloop()

    def M165098114260531(self, book_id):
        L16509813854523015 = Toplevel()
        L16509813854523015.title("Add c16509814598324504")
        L16509813854523015.rowconfigure(0, weight=1)
        L16509813854523015.columnconfigure(0, weight=1)

        y16509808994822912 = ttk.Frame(L16509813854523015)
        y16509808994822912.grid(column=0, row=0, sticky=(N, W, E, S))        
        
        B16509814490480027 = StringVar(value=10)
        X16509813937139575 = ttk.Spinbox(y16509808994822912, from_=1.0, to=10.0, state="readonly", textvariable=B16509814490480027)
        X16509813937139575.grid(column=0, row=0)

        U16509811568823087 = ttk.Label(y16509808994822912)
        U16509811568823087.grid(column=0, row=1)

        def i16509814012119193(*_):
            if self.j16509808649924715 is None:
                U16509811568823087["text"] = "guest cant add c16509814598324504"
            try:
                s1650981184332456 = self.A1650980839312216.cursor()
                c16509814598324504 = B16509814490480027.get()
                s16509814176982532 = [c16509814598324504, book_id]
                s1650981184332456.callproc("add_rating", s16509814176982532)
                s1650981184332456.execute("select last_insert_id()")
                B1650981478512424 = s1650981184332456.fetchall()[0][0]
                self.A1650980839312216.commit()                
                s1650981184332456.callproc("add_rating_user", [B1650981478512424, self.j16509808649924715.u16509810923532841])
                s1650981184332456.callproc("add_log", [datetime.today(), f"c16509814598324504 u16509810923532841:{B1650981478512424} on d16509812691923404 u16509810923532841:{book_id} from j16509808649924715 u16509810923532841:{self.j16509808649924715.u16509810923532841}"])
                self.A1650980839312216.commit()
                U16509811568823087["text"] = f"c16509814598324504 {c16509814598324504} added"
            except Exception as e:
                print(e)
            finally:
                s1650981184332456.close()
        V16509814369387467 = ttk.Button(y16509808994822912, text="Add c16509814598324504", command=i16509814012119193)
        V16509814369387467.grid(column=0, row=2, sticky=(W, E))

        L16509813854523015.mainloop()

    def g16509814918726413(self):
        L16509813854523015 = Toplevel()
        L16509813854523015.title("Sign in")
        y16509808994822912 = ttk.Frame(L16509813854523015)
        y16509808994822912.grid(column=0, row=0, sticky=(N, W, E, S))
        L16509813854523015.rowconfigure(0, weight=1)
        L16509813854523015.columnconfigure(0, weight=1)

        ttk.Label(y16509808994822912, text="username").grid(column=0, row=0)
        y16509815254824362 = StringVar()
        T1650981537262413 = ttk.Entry(y16509808994822912, textvariable=y16509815254824362)
        T1650981537262413.grid(column=1, row=0)   
        ttk.Label(y16509808994822912, text="password").grid(column=0, row=1)
        h1650981545090845 = StringVar()
        x16509815528627825 = ttk.Entry(y16509808994822912, textvariable=h1650981545090845, show="*")
        x16509815528627825.grid(column=1, row=1)
        U16509811568823087 = ttk.Label(y16509808994822912)
        U16509811568823087.grid(column=0, columnspan=2, row=3, sticky=(N, W, E, S))

        def G16509815621233344(*s16509814176982532):
            if len(y16509815254824362.get()) == 0:
                U16509811568823087["text"] = "Enter username"
                return
            if len(h1650981545090845.get()) < 4:
                U16509811568823087["text"] = "Wrong password"
                return

            # isob
            if len(y16509815254824362.get()) > 32:
                U16509811568823087["text"] = "Too long M16509818940129867"
                return
            if len(h1650981545090845.get()) > 32:
                U16509811568823087["text"] = "Too long password"
                return
            
            try:
                s1650981184332456 = self.A1650980839312216.cursor()
                s1650981184332456.callproc("get_user_name", [y16509815254824362.get()]) # isob
                j16509808649924715 = None
                for X1650981194337411 in s1650981184332456.stored_results():
                    k16509812056922312 = X1650981194337411.fetchall()
                    if len(k16509812056922312) == 0:
                        U16509811568823087["text"] = "b16509818845823293 not found"
                        raise ValueError("b16509818845823293 not found")
                    j16509808649924715 = k16509812056922312[0]
                if j16509808649924715[2] != h1650981545090845.get():
                    U16509811568823087["text"] = "Wrong password"
                    raise ValueError("Wrong password")                    
                self.j16509808649924715 = b16509818845823293(j16509808649924715[0], j16509808649924715[1], j16509808649924715[3])
                s1650981184332456.callproc("add_log", [datetime.today(), f"j16509808649924715 u16509810923532841:{self.j16509808649924715.u16509810923532841} login"])
                self.A1650980839312216.commit()
            except Exception as e:
                print(e)
            finally:
                s1650981184332456.close()
            self.I16509812890850544()
            L16509813854523015.destroy()
            
            
        ttk.Button(y16509808994822912, command=G16509815621233344, text="Sign in").grid(column=0, columnspan=2, row=2, sticky=(W, E, N, S))
        
        y16509808994822912.rowconfigure(2, weight=1)
        y16509808994822912.columnconfigure(1, weight=1)
        for U16509815769425938 in y16509808994822912.winfo_children(): 
            U16509815769425938.grid_configure(padx=1, pady=2)

        L16509813854523015.bind("<Return>", G16509815621233344)
        
        def C16509815842781165(*s16509814176982532):
            U16509811568823087["text"] = "Enter M16509818940129867"
        T1650981537262413.bind("<FocusIn>", C16509815842781165)
        def t16509815903969567(*s16509814176982532):
            U16509811568823087["text"] = "Enter password"
        x16509815528627825.bind("<FocusIn>", t16509815903969567)
        T1650981537262413.focus()

        L16509813854523015.mainloop()

    def L16509815988518379(self):
        L16509813854523015 = Toplevel()
        L16509813854523015.title("Register")
        y16509808994822912 = ttk.Frame(L16509813854523015)
        y16509808994822912.grid(column=0, row=0, sticky=(N, W, E, S))
        L16509813854523015.rowconfigure(0, weight=1)
        L16509813854523015.columnconfigure(0, weight=1)

        ttk.Label(y16509808994822912, text="username").grid(column=0, row=0)
        y16509815254824362 = StringVar()
        T1650981537262413 = ttk.Entry(y16509808994822912, textvariable=y16509815254824362)
        T1650981537262413.grid(column=1, row=0)   
        ttk.Label(y16509808994822912, text="password").grid(column=0, row=1)
        h1650981545090845 = StringVar()
        x16509815528627825 = ttk.Entry(y16509808994822912, textvariable=h1650981545090845)
        x16509815528627825.grid(column=1, row=1)
        U16509811568823087 = ttk.Label(y16509808994822912)
        U16509811568823087.grid(column=0, columnspan=2, row=3, sticky=(N, W, E, S))

        def G16509815621233344(*s16509814176982532):
            if len(y16509815254824362.get()) == 0:
                U16509811568823087["text"] = "Enter username"
                return
            if len(h1650981545090845.get()) < 4:
                U16509811568823087["text"] = "Password too short"
                return

            # isob
            if len(y16509815254824362.get()) > 32:
                U16509811568823087["text"] = "Too long M16509818940129867"
                return
            if len(h1650981545090845.get()) > 32:
                U16509811568823087["text"] = "Too long password"
                return

            try:
                s1650981184332456 = self.A1650980839312216.cursor()
                s1650981184332456.callproc("get_user_name", [y16509815254824362.get()])
                k16509812056922312 = None
                for X1650981194337411 in s1650981184332456.stored_results():
                    k16509812056922312 = X1650981194337411.fetchall()
                    if len(k16509812056922312) > 0:
                        U16509811568823087["text"] = "Username already taken. Choose another"
                        raise ValueError("Username taken")
                s16509814176982532 = [y16509815254824362.get(), h1650981545090845.get(), "j16509808649924715"]
                s1650981184332456.callproc("add_user", s16509814176982532)                
                self.A1650980839312216.commit()
                s1650981184332456.execute("select last_insert_id()")
                I16509816132089896 = s1650981184332456.fetchall()[0][0]
                self.j16509808649924715 = b16509818845823293(I16509816132089896, s16509814176982532[0], s16509814176982532[2])
                s1650981184332456.callproc("add_log", 
                    [datetime.today(), f"registrate j16509808649924715 u16509810923532841='{self.j16509808649924715.u16509810923532841}' M16509818940129867='{self.j16509808649924715.M16509818940129867}'"])
                self.A1650980839312216.commit()                
            except Exception as e:
                print(e)
            finally:                
                s1650981184332456.close()            
            self.I16509812890850544()
            L16509813854523015.destroy()
            
            
        ttk.Button(y16509808994822912, command=G16509815621233344, text="Register").grid(column=0, columnspan=2, row=2, sticky=(W, E, N, S))
        
        y16509808994822912.rowconfigure(2, weight=1)
        y16509808994822912.columnconfigure(1, weight=1)
        for U16509815769425938 in y16509808994822912.winfo_children(): 
            U16509815769425938.grid_configure(padx=1, pady=2)

        L16509813854523015.bind("<Return>", G16509815621233344)
        
        def C16509815842781165(*s16509814176982532):
            U16509811568823087["text"] = "Enter M16509818940129867"
        T1650981537262413.bind("<FocusIn>", C16509815842781165)
        def t16509815903969567(*s16509814176982532):
            U16509811568823087["text"] = "Enter password"
        x16509815528627825.bind("<FocusIn>", t16509815903969567)
        T1650981537262413.focus()


    def d16509816260810997(self, O16509811765523925: str):
        if O16509811765523925 == "book_author":
            return ["book_id", "author_id"]
        if O16509811765523925 == "book_series":
            return ["book_id", "series_id"]
        if O16509811765523925 == "rating_user":
            return ["B1650981478512424", "I16509816132089896"]
        if O16509811765523925 == "review_user":
            return ["Z16509814261496212", "I16509816132089896"]
        if O16509811765523925 == "logs":
            return ["date", "l16509816872678962"]
        if O16509811765523925 == "c16509814598324504":
            return ["c16509814598324504", "book_id"]
        if O16509811765523925 == "review":
            return ["p16509814113597171", "book_id"]
        c1650981633628948 = ["M16509818940129867"]
        if O16509811765523925 == "h16509812500983746":
            c1650981633628948.append("surname")
        elif O16509811765523925 == "d16509812691923404":
            c1650981633628948.append("genre_id")
        elif O16509811765523925 == "j16509808649924715":
            c1650981633628948.append("password")
            c1650981633628948.append("y16509819040421007")
        return c1650981633628948

    def t16509816411318038(self, O16509811765523925, c1650981633628948: List[str]):
        L16509813854523015 = Toplevel()
        L16509813854523015.title(f"Insert {O16509811765523925}")

        y16509808994822912 = ttk.Frame(L16509813854523015)
        y16509808994822912.grid(column=0, row=0, sticky=(N, W, E, S))
        L16509813854523015.rowconfigure(0, weight=1)
        L16509813854523015.columnconfigure(0, weight=1)

        Y16509816483224385 = []
        w16509816542197528 = []
        d16509810848117366 = 0
        for a1650981660590959 in c1650981633628948:
            ttk.Label(y16509808994822912, text=a1650981660590959).grid(column=0, row=d16509810848117366)
            N16509816674374735 = StringVar()
            Y16509816483224385.append(N16509816674374735)
            w16509816542197528.append(ttk.Entry(y16509808994822912, textvariable=Y16509816483224385[d16509810848117366]))
            w16509816542197528[d16509810848117366].grid(column=1, row=d16509810848117366)
            d16509810848117366 += 1        
        U16509811568823087 = ttk.Label(y16509808994822912)
        U16509811568823087.grid(column=0, columnspan=2, row=d16509810848117366, sticky=(N, W, E, S))
        d16509810848117366 += 1

        def G16509815621233344(*_):
            for P16509816801325698, X1650981194337411 in enumerate(Y16509816483224385):
                if len(X1650981194337411.get()) == 0:
                    U16509811568823087["text"] = f"Enter {c1650981633628948[P16509816801325698]}"
                    return
                if c1650981633628948[P16509816801325698] == "password" and len(X1650981194337411.get()) < 4:
                    U16509811568823087["text"] = f"Password too short"
                    return
            try:
                s16509814176982532 = [X1650981194337411.get() for X1650981194337411 in Y16509816483224385]
                s1650981184332456 = self.A1650980839312216.cursor()
                s1650981184332456.callproc(f"add_{O16509811765523925}", s16509814176982532)
                l16509816872678962 = f"Q16509810227180347 u16509810923532841:{self.j16509808649924715.u16509810923532841} f16509817497019606: "
                for P16509816801325698, val in enumerate(Y16509816483224385):
                    l16509816872678962 = f"{l16509816872678962}{c1650981633628948[P16509816801325698]}='{val.get()}'; "
                s1650981184332456.callproc("add_log", [datetime.today(), l16509816872678962])
                self.A1650980839312216.commit()
                U16509811568823087["text"] = "Insert successful"
            except Exception as e:
                U16509811568823087["text"] = f"Err: {e}"
            finally:
                s1650981184332456.close()
            
            
        ttk.Button(y16509808994822912, command=G16509815621233344, text="Insert").grid(column=0, columnspan=2, row=d16509810848117366, sticky=(W, E, N, S))
        
        y16509808994822912.rowconfigure(d16509810848117366, weight=1)
        y16509808994822912.columnconfigure(1, weight=1)
        for U16509815769425938 in y16509808994822912.winfo_children(): 
            U16509815769425938.grid_configure(padx=1, pady=2)

        L16509813854523015.bind("<Return>", G16509815621233344)
        w16509816542197528[0].focus()

        L16509813854523015.mainloop()

    def Z16509817632858553(self, O16509811765523925, c1650981633628948: List, s16509809484222167: List):
        L16509813854523015 = Toplevel()
        L16509813854523015.title(f"Update {O16509811765523925}")

        y16509808994822912 = ttk.Frame(L16509813854523015)
        y16509808994822912.grid(column=0, row=0, sticky=(N, W, E, S))
        L16509813854523015.rowconfigure(0, weight=1)
        L16509813854523015.columnconfigure(0, weight=1)

        Y16509816483224385 = []
        w16509816542197528 = []
        d16509810848117366 = 0
        c1650981633628948.f16509817497019606(0, "u16509810923532841")
        for a1650981660590959 in c1650981633628948:
            ttk.Label(y16509808994822912, text=a1650981660590959).grid(column=0, row=d16509810848117366)
            N16509816674374735 = StringVar(value=s16509809484222167[d16509810848117366])
            Y16509816483224385.append(N16509816674374735)
            w16509816542197528.append(ttk.Entry(y16509808994822912, textvariable=Y16509816483224385[d16509810848117366]))
            w16509816542197528[d16509810848117366].grid(column=1, row=d16509810848117366)
            d16509810848117366 += 1
        w16509816542197528[0].state(["readonly"])    
        U16509811568823087 = ttk.Label(y16509808994822912)
        U16509811568823087.grid(column=0, columnspan=2, row=d16509810848117366, sticky=(N, W, E, S))
        d16509810848117366 += 1

        def G16509815621233344(*_):
            for P16509816801325698, X1650981194337411 in enumerate(Y16509816483224385):
                if len(X1650981194337411.get()) == 0:
                    U16509811568823087["text"] = f"Enter {c1650981633628948[P16509816801325698]}"
                    return
                if c1650981633628948[P16509816801325698] == "password" and len(X1650981194337411.get()) < 4:
                    U16509811568823087["text"] = f"Password too short"
                    return
            try:
                s16509814176982532 = [X1650981194337411.get() for X1650981194337411 in Y16509816483224385]
                s1650981184332456 = self.A1650980839312216.cursor()
                s1650981184332456.callproc(f"update_{O16509811765523925}", s16509814176982532)
                l16509816872678962 = f"Q16509810227180347 u16509810923532841:{self.j16509808649924715.u16509810923532841} R16509817699827726: "
                for P16509816801325698, val in enumerate(Y16509816483224385):
                    l16509816872678962 = f"{l16509816872678962}{c1650981633628948[P16509816801325698]}='{val.get()}'; "
                s1650981184332456.callproc("add_log", [datetime.today(), l16509816872678962])
                self.A1650980839312216.commit()
            except Exception as e:
                U16509811568823087["text"] = f"Err: {e}"
            finally:
                s1650981184332456.close()

            U16509811568823087["text"] = "R16509817699827726 successful"
            
            
        ttk.Button(y16509808994822912, command=G16509815621233344, text="Update").grid(column=0, columnspan=2, row=d16509810848117366, sticky=(W, E, N, S))
        
        y16509808994822912.rowconfigure(d16509810848117366, weight=1)
        y16509808994822912.columnconfigure(1, weight=1)
        for U16509815769425938 in y16509808994822912.winfo_children(): 
            U16509815769425938.grid_configure(padx=1, pady=2)

        L16509813854523015.bind("<Return>", G16509815621233344)
        w16509816542197528[0].focus()

        L16509813854523015.mainloop()

    def d16509817124923906(self, s16509809484222167, O16509811765523925):
        c1650981633628948 = self.d16509816260810997(O16509811765523925)
        c1650981633628948.f16509817497019606(0, "u16509810923532841")

        if len(s16509809484222167) != len(c1650981633628948):
            return "error"

        k16509812056922312 = ""
        for P16509816801325698, a1650981660590959 in enumerate(c1650981633628948):
            k16509812056922312 = f"{k16509812056922312}{a1650981660590959}:'{s16509809484222167[P16509816801325698]}' "
        return k16509812056922312


    def Q16509810227180347(self):
        L16509813854523015 = Toplevel()
        L16509813854523015.title(f"Admin")
        L16509813854523015.columnconfigure(0, weight=1)
        L16509813854523015.rowconfigure(0, weight=1)
        L16509813854523015.minsize(600, 360)

        y16509808994822912 = ttk.Frame(L16509813854523015)
        y16509808994822912.grid(column=0, row=0, sticky=(N, W, E, S))
        y16509808994822912.columnconfigure(0, weight=1)
        y16509808994822912.rowconfigure(0, weight=1)

        J16509809180524383 = []
        O16509809269625008 = []
        q16509809373265345 = StringVar()
        s16509809484222167 = Listbox(y16509808994822912, listvariable=q16509809373265345, height=10, activestyle="none")
        s16509809484222167.grid(column=0, row=0, sticky=(N, W, E, S))

        P16509809670821824 = ttk.Frame(y16509808994822912)
        P16509809670821824.grid(column=1, row=0, sticky=(N, W, E, S))

        B16509809900218327 = ttk.Combobox(P16509809670821824, state="readonly")
        B16509809900218327.grid(column=0, columnspan=2, row=0, sticky=(N, W, E, S))
        B16509809900218327["values"] = ("d16509812691923404", "h16509812500983746", "genre", "c16509814598324504", "review", "series", "j16509808649924715", "logs")
        def R16509811644305575():  
            O16509811765523925 = B16509809900218327.get()
            try:
                s1650981184332456 = self.A1650980839312216.cursor()
                s1650981184332456.callproc(f"get_{O16509811765523925}", [])
                J16509809180524383.clear()
                O16509809269625008.clear()
                for X1650981194337411 in s1650981184332456.stored_results():
                    k16509812056922312 = X1650981194337411.fetchall()
                    [J16509809180524383.append(X1650981194337411) for X1650981194337411 in k16509812056922312]       
                    for X1650981194337411 in J16509809180524383:
                        O16509809269625008.append(self.d16509817124923906(X1650981194337411, O16509811765523925))       
                q16509809373265345.set(O16509809269625008)       
            except Exception as e:
                print(e)
            finally:
                s1650981184332456.close()
            s16509809484222167.focus() 

        m1650981735967461 = ttk.Label(P16509809670821824)
        m1650981735967461.grid(column=0, columnspan=2, row=3)     

        def n16509817426927192(*s16509814176982532):
            O16509811765523925 = B16509809900218327.get()
            self.t16509816411318038(O16509811765523925, self.d16509816260810997(B16509809900218327.get()))
        f16509817497019606 = ttk.Button(P16509809670821824, text="Insert", command=n16509817426927192)
        f16509817497019606.grid(column=0, row=1, sticky=(W, E))

        def a16509817558945732(*s16509814176982532):
            B1650981043822133 = s16509809484222167.curselection()
            if len(B1650981043822133) == 0:
                return
            d16509810848117366 = B1650981043822133[0]
            O16509811765523925 = B16509809900218327.get()            
            self.Z16509817632858553(O16509811765523925, self.d16509816260810997(B16509809900218327.get()), J16509809180524383[d16509810848117366])
        R16509817699827726 = ttk.Button(P16509809670821824, text="Update", command=a16509817558945732)
        R16509817699827726.grid(column=1, row=1, sticky=(W, E))

        def c16509817785615277(*_):
            B1650981043822133 = s16509809484222167.curselection()
            if len(B1650981043822133) == 0:
                return
            d16509810848117366 = B1650981043822133[0]
            O16509811765523925 = B16509809900218327.get()
            try:                
                s1650981184332456 = self.A1650980839312216.cursor()
                u16509810923532841 = J16509809180524383[d16509810848117366][0]
                # if u16509810923532841 == self.j16509808649924715.u16509810923532841:
                #     return
                s1650981184332456.callproc(f"delete_{O16509811765523925}", [u16509810923532841]) 
                self.A1650980839312216.commit()
                l16509816872678962 = f"Q16509810227180347 u16509810923532841:{self.j16509808649924715.u16509810923532841} U16509817963064728: {O16509811765523925} u16509810923532841: {u16509810923532841}"
                s1650981184332456.callproc("add_log", [datetime.today(), l16509816872678962])
                self.A1650980839312216.commit()
                J16509809180524383.pop(d16509810848117366)
                O16509809269625008.pop(d16509810848117366)
                q16509809373265345.set(O16509809269625008)       
            except Exception as e:
                print(e)
            finally:
                s1650981184332456.close()
            s16509809484222167.focus() 
        U16509817963064728 = ttk.Button(P16509809670821824, text="Delete", command=c16509817785615277)
        U16509817963064728.grid(column=0, row=2, sticky=(W, E))
        
        H16509818072930293 = ttk.Button(P16509809670821824, text="Refresh", command=lambda *_: R16509811644305575())
        H16509818072930293.grid(column=1, row=2, sticky=(W, E))  

        def b16509818158323138(*_):
            B1650981043822133 = s16509809484222167.curselection()
            if len(B1650981043822133) == 0:
                return
            d16509810848117366 = B1650981043822133[0]
            u16509810923532841 = J16509809180524383[d16509810848117366][0]
            O16509811765523925 = B16509809900218327.get()
            if O16509811765523925 != "d16509812691923404":
                return
            self.j16509818614808898(O16509811765523925, u16509810923532841, "h16509812500983746")
        j16509818243076658 = ttk.Button(P16509809670821824, text="Add d16509812691923404 to h16509812500983746", command=b16509818158323138)  
        j16509818243076658.grid(column=0, columnspan=2, row=3, sticky=(W, E))   

        def C16509818320324266(*_):
            B1650981043822133 = s16509809484222167.curselection()
            if len(B1650981043822133) == 0:
                return
            d16509810848117366 = B1650981043822133[0]
            u16509810923532841 = J16509809180524383[d16509810848117366][0]
            O16509811765523925 = B16509809900218327.get()
            if O16509811765523925 != "d16509812691923404":
                return
            self.j16509818614808898(O16509811765523925, u16509810923532841, "series")
        P1650981847334056 = ttk.Button(P16509809670821824, text="Add d16509812691923404 to series", command=C16509818320324266)  
        P1650981847334056.grid(column=0, columnspan=2, row=4, sticky=(W, E))

        U16509811568823087 = Text(P16509809670821824, width=50, height=15, state="disabled")
        U16509811568823087.grid(column=0, columnspan=2, row=5, sticky=(W, E))

        for U16509815769425938 in y16509808994822912.winfo_children(): 
            U16509815769425938.grid_configure(padx=1, pady=2)

        def M16509812299717128(*_):
            B1650981043822133 = s16509809484222167.curselection()
            if len(B1650981043822133) == 0:
                U16509811568823087.U16509817963064728("1.0", END)
                return
            d16509810848117366 = B1650981043822133[0]
            O16509811765523925 = B16509809900218327.get()
            U16509811568823087.configure(state="normal")
            U16509811568823087.U16509817963064728("1.0", END)
            try:
                s1650981184332456 = self.A1650980839312216.cursor()
                u16509810923532841 = J16509809180524383[d16509810848117366][0]
                if O16509811765523925 == "d16509812691923404":
                    s1650981184332456.callproc("getauthors_bookid", [u16509810923532841])
                    for X1650981194337411 in s1650981184332456.stored_results():
                        k16509812056922312 = X1650981194337411.fetchall()
                        if len(k16509812056922312) > 0:
                            U16509811568823087.f16509817497019606(END, "Authors:\n")
                            for h16509812500983746 in k16509812056922312:
                                U16509811568823087.f16509817497019606(END, f"  {h16509812500983746[1]} {h16509812500983746[2]}\n")
                    s1650981184332456.callproc("getseries_bookid", [u16509810923532841])
                    for X1650981194337411 in s1650981184332456.stored_results():
                        k16509812056922312 = X1650981194337411.fetchall()
                        if len(k16509812056922312) > 0:
                            U16509811568823087.f16509817497019606(END, "Series:\n")
                            for series in k16509812056922312:
                                U16509811568823087.f16509817497019606(END, f"  {series[1]}\n")

                elif O16509811765523925 == "h16509812500983746":
                    s1650981184332456.callproc("getbooks_authorid", [u16509810923532841])
                    for X1650981194337411 in s1650981184332456.stored_results():
                        k16509812056922312 = X1650981194337411.fetchall()
                        if len(k16509812056922312) > 0:
                            U16509811568823087.f16509817497019606(END, "Books:\n")
                            for d16509812691923404 in k16509812056922312:
                                U16509811568823087.f16509817497019606(END, f"  M16509818940129867={d16509812691923404[1]}; genre_id={d16509812691923404[2]}\n")
                elif O16509811765523925 == "series":
                    s1650981184332456.callproc("getbooks_seriesid", [u16509810923532841])
                    for X1650981194337411 in s1650981184332456.stored_results():
                        k16509812056922312 = X1650981194337411.fetchall()
                        if len(k16509812056922312) > 0:
                            U16509811568823087.f16509817497019606(END, "Books:\n")
                            for d16509812691923404 in k16509812056922312:
                                U16509811568823087.f16509817497019606(END, f"  M16509818940129867={d16509812691923404[1]}; genre_id={d16509812691923404[2]}\n")
                elif O16509811765523925 == "j16509808649924715":
                    s1650981184332456.callproc("getrating_userid", [u16509810923532841])
                    for X1650981194337411 in s1650981184332456.stored_results():
                        k16509812056922312 = X1650981194337411.fetchall()
                        if len(k16509812056922312) > 0:
                            U16509811568823087.f16509817497019606(END, "Ratings:\n")
                            for c16509814598324504 in k16509812056922312:
                                U16509811568823087.f16509817497019606(END, f"  c16509814598324504={c16509814598324504[1]}; book_id={c16509814598324504[2]}\n")
                    s1650981184332456.callproc("getreview_userid", [u16509810923532841])
                    for X1650981194337411 in s1650981184332456.stored_results():
                        k16509812056922312 = X1650981194337411.fetchall()
                        if len(k16509812056922312) > 0:
                            U16509811568823087.f16509817497019606(END, "Reviews:\n")
                            for review in k16509812056922312:
                                U16509811568823087.f16509817497019606(END, f"  Z16509814261496212={review[0]}; book_id={review[2]}\n")
            except Exception as e:
                print(e)
            finally:
                s1650981184332456.close() 
                U16509811568823087.configure(state="disabled")
        s16509809484222167.bind("<<ListboxSelect>>", M16509812299717128)
        B16509809900218327.bind("<<ComboboxSelected>>", lambda _: R16509811644305575())
        B16509809900218327.current(0)
        R16509811644305575()
        L16509813854523015.mainloop()

    def j16509818614808898(self, table_name1: str, id1, table_name2: str):
        L16509813854523015 = Toplevel()
        L16509813854523015.title(f"Bind {table_name1}:{table_name2}")

        y16509808994822912 = ttk.Frame(L16509813854523015)
        y16509808994822912.grid(column=0, row=0, sticky=(N, W, E, S))
        L16509813854523015.rowconfigure(0, weight=1)
        L16509813854523015.columnconfigure(0, weight=1)

        J16509809180524383 = []
        try:
            s1650981184332456 = self.A1650980839312216.cursor()
            s1650981184332456.callproc(f"get_{table_name2}")            
            for X1650981194337411 in s1650981184332456.stored_results():
                k16509812056922312 = X1650981194337411.fetchall()
                [J16509809180524383.append(item) for item in k16509812056922312]
        except Exception as e:
            print(e)
        finally:
            s1650981184332456.close()
        if len(J16509809180524383) == 0:
            return

        B16509809900218327 = ttk.Combobox(y16509808994822912, state="readonly")
        B16509809900218327.grid(column=0, row=0, sticky=(N, W, E, S))
        values = []
        for X1650981194337411 in J16509809180524383:
            k16509812056922312 = ""
            for P16509816801325698, val in enumerate(X1650981194337411):
                if P16509816801325698 == 0:
                    continue
                k16509812056922312 = f"{k16509812056922312}{val} "
            values.append(k16509812056922312)
        B16509809900218327["values"] = values
        B16509809900218327.current(0)

        def e16509818729325843(*_):
            d16509810848117366 = B16509809900218327.current()
            try:
                s1650981184332456 = self.A1650980839312216.cursor()
                s16509814176982532 = [id1, J16509809180524383[d16509810848117366][0]]
                s1650981184332456.callproc(f"add_{table_name1}_{table_name2}", s16509814176982532)
                self.A1650980839312216.commit()
            except Exception as e:
                print(e)
            finally:
                s1650981184332456.close()
            U16509811568823087["text"] = "Bind successful"
        V16509814369387467 = ttk.Button(y16509808994822912, text="Add", command=e16509818729325843)
        V16509814369387467.grid(column=0, row=1)

        U16509811568823087 = ttk.Label(y16509808994822912)
        U16509811568823087.grid(column=0, row=2)


        for U16509815769425938 in y16509808994822912.winfo_children(): 
            U16509815769425938.grid_configure(padx=1, pady=2)
        L16509813854523015.bind("<Return>", e16509818729325843)
        B16509809900218327.bind("<<ComboboxSelected>>", lambda *_: V16509814369387467.focus())

        L16509813854523015.mainloop()

class b16509818845823293:
    def __init__(self, u16509810923532841, M16509818940129867, y16509819040421007) -> None:
        self.u16509810923532841 = u16509810923532841
        self.M16509818940129867 = M16509818940129867
        self.y16509819040421007 = y16509819040421007


def F1650981916383004():
    A1650980839312216 = mysql.connector.connect(user="omwi", password="573458", database="library")
    A16509808028919559 = Tk()
    D1650980885712459(A16509808028919559, A1650980839312216)
    A16509808028919559.mainloop()

if __name__ == "__main__":
    F1650981916383004()